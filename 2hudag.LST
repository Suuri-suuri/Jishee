CCS PCH C Compiler, Version 3.190, 23458

               Filename: C:\Users\User\Documents\Azaa_1\TURSHILT\2hudag.LST

               ROM used: 2548 (8%)
                         Largest free fragment is 2548
               RAM used: 120 (8%) at main() level
                         124 (8%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   02FA
*
0008:  NOP(FFFF)
000A:  MOVWF  05
000C:  MOVFF  FD8,06
0010:  MOVF   FE9,W
0012:  MOVWF  07
0014:  MOVF   FEA,W
0016:  MOVWF  08
0018:  MOVF   FE1,W
001A:  MOVWF  09
001C:  MOVF   FE2,W
001E:  MOVWF  0A
0020:  MOVF   FD9,W
0022:  MOVWF  0B
0024:  MOVF   FDA,W
0026:  MOVWF  0C
0028:  MOVF   FF3,W
002A:  MOVWF  14
002C:  MOVF   FF4,W
002E:  MOVWF  15
0030:  MOVF   FE0,W
0032:  MOVWF  0D
0034:  MOVLB  0
0036:  MOVF   00,W
0038:  MOVWF  0F
003A:  MOVF   01,W
003C:  MOVWF  10
003E:  MOVF   02,W
0040:  MOVWF  11
0042:  MOVF   03,W
0044:  MOVWF  12
0046:  MOVF   04,W
0048:  MOVWF  13
004A:  BTFSS  F9D.5
004C:  GOTO   0056
0050:  BTFSC  F9E.5
0052:  GOTO   0098
0056:  MOVF   0F,W
0058:  MOVWF  00
005A:  MOVF   10,W
005C:  MOVWF  01
005E:  MOVF   11,W
0060:  MOVWF  02
0062:  MOVF   12,W
0064:  MOVWF  03
0066:  MOVF   13,W
0068:  MOVWF  04
006A:  MOVF   0D,W
006C:  MOVWF  FE0
006E:  BSF    0D.7
0070:  MOVF   07,W
0072:  MOVWF  FE9
0074:  MOVF   08,W
0076:  MOVWF  FEA
0078:  MOVF   09,W
007A:  MOVWF  FE1
007C:  MOVF   0A,W
007E:  MOVWF  FE2
0080:  MOVF   0B,W
0082:  MOVWF  FD9
0084:  MOVF   0C,W
0086:  MOVWF  FDA
0088:  MOVF   14,W
008A:  MOVWF  FF3
008C:  MOVF   15,W
008E:  MOVWF  FF4
0090:  MOVF   05,W
0092:  MOVFF  06,FD8
0096:  RETFIE 0
....................  #include "C:\Users\User\Documents\Azaa_1\TURSHILT\2hudag.h" 
....................  #include <18F452.h> 
....................  //////// Standard Header file for the PIC18F452 device ////////////////  
.................... #device PIC18F452  
.................... #list  
....................  
.................... #device adc=8  
.................... #use delay(clock=20000000)  
*
00E6:  CLRF   FEA
00E8:  MOVLW  76
00EA:  MOVWF  FE9
00EC:  MOVF   FEF,W
00EE:  BTFSC  FD8.2
00F0:  GOTO   010E
00F4:  MOVLW  06
00F6:  MOVWF  01
00F8:  CLRF   00
00FA:  DECFSZ 00,F
00FC:  BRA    00FA
00FE:  DECFSZ 01,F
0100:  BRA    00F8
0102:  MOVLW  7B
0104:  MOVWF  00
0106:  DECFSZ 00,F
0108:  BRA    0106
010A:  DECFSZ FEF,F
010C:  BRA    00F4
010E:  RETLW  00
0110:  NOP(FFFF)
.................... #fuses NOWDT,WDT128,HS, NOPROTECT, NOOSCSEN, BROWNOUT, BORV20, NOPUT, STVREN, NODEBUG, NOLVP, NOWRT, NOWRTD, NOWRTB, NOWRTC, NOCPD, NOCPB, NOEBTR, NOEBTRB  
*
00E4:  NOP(FFFF)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)  
....................   
....................  
....................   
.................... #byte port_d   =  0x0f83  
.................... #byte port_a   =  0x0f80  
.................... #byte port_e   =  0x0f84  
.................... #byte port_b   =  0x0f81  
.................... #bit dat0 = 0xf82.0  
....................   
.................... int8 temp2,i=0,a0,a1,a2,a3,a4,a5,a6,a7,a8;  
.................... int8 data[20],numb[10]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39};  
.................... int8 n1,n2,n3,tmp,p1,p2,h1,smoke,blok,dundaj=0,k0=0;  
.................... int16 r0=0,r10=0;  
....................   
.................... char message1[] = "Temp = 00.0  ";  
.................... char message2[] = "RH   = 00.0  ";  
.................... short Time_out;  
.................... unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum;  
.................... unsigned int16 RH, Temp;  
....................   
....................   
.................... #int_RDA  
.................... RDA_isr()  
.................... {  
*
0098:  NOP(FFFF)
.................... temp2=getc();  
009A:  BTFSS  F9E.5
009C:  GOTO   009A
00A0:  MOVF   FAE,W
00A2:  MOVWF  17
....................   
.................... if(temp2>='C' && temp2<='D'){  
00A4:  MOVF   17,W
00A6:  SUBLW  42
00A8:  BTFSC  FD8.0
00AA:  GOTO   00DE
00AE:  MOVF   17,W
00B0:  SUBLW  44
00B2:  BTFSS  FD8.0
00B4:  GOTO   00DE
....................    switch (temp2){  
00B8:  MOVF   17,W
00BA:  XORLW  43
00BC:  BTFSC  FD8.2
00BE:  GOTO   00CE
00C2:  XORLW  07
00C4:  BTFSC  FD8.2
00C6:  GOTO   00D6
00CA:  GOTO   00DE
....................       case 'C' : port_d=0x01;break;  
00CE:  MOVLW  01
00D0:  MOVWF  F83
00D2:  GOTO   00DE
....................       case 'D': port_d=0x02;break;  
00D6:  MOVLW  02
00D8:  MOVWF  F83
00DA:  GOTO   00DE
....................    }  
.................... }  
.................... }  
....................   
....................   
00DE:  BCF    F9E.5
00E0:  GOTO   0056
.................... void start_signal(){  
....................  set_tris_c(0x80);    //Configure RD0 as output  
*
0112:  NOP(FFFF)
0114:  MOVLW  80
0116:  MOVWF  F94
....................  dat0 = 0;    //RD0 sends 0 to the sensor  
0118:  BCF    F82.0
....................   delay_ms(25);  
011A:  MOVLW  19
011C:  MOVWF  76
011E:  CALL   00E4
....................   dat0 = 1;                       // Connection pin output high  
0122:  BSF    F82.0
....................   delay_us(30);  
0124:  MOVLW  31
0126:  MOVWF  00
0128:  DECFSZ 00,F
012A:  BRA    0128
012C:  NOP   
012E:  NOP   
....................   set_tris_c(0x81);              // Configure connection pin as input  
0130:  MOVLW  81
0132:  MOVWF  F94
.................... }  
0134:  GOTO   0430 (RETURN)
0138:  NOP(FFFF)
.................... short check_response(){  
....................   delay_us(30);  
013A:  NOP(FFFF)
013C:  MOVLW  31
013E:  MOVWF  00
0140:  DECFSZ 00,F
0142:  BRA    0140
0144:  NOP   
0146:  NOP   
....................   if(dat0 == 0){                     // Read and test if connection pin is low  
0148:  MOVLW  00
014A:  BTFSC  F82.0
014C:  MOVLW  01
014E:  XORLW  00
0150:  BTFSS  FD8.2
0152:  GOTO   017C
....................     delay_us(80);  
0156:  MOVLW  85
0158:  MOVWF  00
015A:  DECFSZ 00,F
015C:  BRA    015A
....................     if(dat0 == 1){                    // Read and test if connection pin is high  
015E:  MOVLW  00
0160:  BTFSC  F82.0
0162:  MOVLW  01
0164:  SUBLW  01
0166:  BTFSS  FD8.2
0168:  GOTO   017C
....................       delay_us(50);  
016C:  MOVLW  53
016E:  MOVWF  00
0170:  DECFSZ 00,F
0172:  BRA    0170
....................       return 1;}  
0174:  MOVLW  01
0176:  MOVWF  01
0178:  GOTO   017C
....................     }  
.................... }  
017C:  GOTO   0434 (RETURN)
0180:  NOP(FFFF)
.................... unsigned int8 Read_Data(){  
....................   unsigned int8 i1, k, _data = 0;     // k is used to count 1 bit reading duration  
0182:  NOP(FFFF)
0184:  CLRF   77
....................   if(Time_out)  
0186:  BTFSS  6B.0
0188:  GOTO   018C
....................     break;  
....................   for(i1 = 0; i1 < 8; i1++){  
018C:  CLRF   75
018E:  MOVF   75,W
0190:  SUBLW  07
0192:  BTFSS  FD8.0
0194:  GOTO   0264
....................     k = 0;  
0198:  CLRF   76
....................     while(dat0 == 0){                          // Wait until pin goes high  
019A:  MOVLW  00
019C:  BTFSC  F82.0
019E:  MOVLW  01
01A0:  XORLW  00
01A2:  BTFSS  FD8.2
01A4:  GOTO   01C8
....................       k++;  
01A8:  INCF   76,F
....................       if (k > 100) {Time_out = 1; break;}  
01AA:  MOVF   76,W
01AC:  SUBLW  64
01AE:  BTFSC  FD8.0
01B0:  GOTO   01BA
01B4:  BSF    6B.0
01B6:  GOTO   01C8
....................       delay_us(1);}  
01BA:  NOP   
01BC:  NOP   
01BE:  NOP   
01C0:  NOP   
01C2:  NOP   
01C4:  GOTO   019A
....................     delay_us(30);  
01C8:  MOVLW  31
01CA:  MOVWF  00
01CC:  DECFSZ 00,F
01CE:  BRA    01CC
01D0:  NOP   
01D2:  NOP   
....................     if(dat0 == 0)  
01D4:  MOVLW  00
01D6:  BTFSC  F82.0
01D8:  MOVLW  01
01DA:  XORLW  00
01DC:  BTFSS  FD8.2
01DE:  GOTO   020C
....................       bit_clear(_data, (7 - i1));               // Clear bit (7 - i)  
01E2:  MOVLW  07
01E4:  BSF    FD8.0
01E6:  SUBFWB 75,W
01E8:  MOVWF  78
01EA:  MOVLW  01
01EC:  MOVWF  00
01EE:  MOVF   78,W
01F0:  MOVWF  01
01F2:  BTFSC  FD8.2
01F4:  GOTO   0202
01F8:  BCF    FD8.0
01FA:  RLCF   00,F
01FC:  DECFSZ 01,F
01FE:  GOTO   01F8
0202:  MOVF   00,W
0204:  XORLW  FF
0206:  ANDWF  77,F
....................     else{  
0208:  GOTO   025E
....................       bit_set(_data, (7 - i1));                 // Set bit (7 - i)  
020C:  MOVLW  07
020E:  BSF    FD8.0
0210:  SUBFWB 75,W
0212:  MOVWF  78
0214:  MOVLW  01
0216:  MOVWF  00
0218:  MOVF   78,W
021A:  MOVWF  01
021C:  BTFSC  FD8.2
021E:  GOTO   022C
0222:  BCF    FD8.0
0224:  RLCF   00,F
0226:  DECFSZ 01,F
0228:  GOTO   0222
022C:  MOVF   00,W
022E:  IORWF  77,F
....................       while(dat0 == 1){                         // Wait until pin goes low  
0230:  MOVLW  00
0232:  BTFSC  F82.0
0234:  MOVLW  01
0236:  SUBLW  01
0238:  BTFSS  FD8.2
023A:  GOTO   025E
....................       k++;  
023E:  INCF   76,F
....................       if (k > 100) {Time_out = 1; break;}  
0240:  MOVF   76,W
0242:  SUBLW  64
0244:  BTFSC  FD8.0
0246:  GOTO   0250
024A:  BSF    6B.0
024C:  GOTO   025E
....................       delay_us(1);}  
0250:  NOP   
0252:  NOP   
0254:  NOP   
0256:  NOP   
0258:  NOP   
025A:  GOTO   0230
....................     }  
....................   }  
025E:  INCF   75,F
0260:  GOTO   018E
....................   return _data;  
0264:  MOVF   77,W
0266:  MOVWF  01
.................... }  
0268:  RETLW  00
026A:  NOP(FFFF)
....................   
....................   
....................   
.................... void main()  
.................... {  
*
02FA:  NOP(FFFF)
02FC:  CLRF   FF8
02FE:  BCF    FD0.7
0300:  BSF    0D.7
0302:  CLRF   FEA
0304:  CLRF   FE9
0306:  MOVLW  06
0308:  MOVWF  FC1
030A:  MOVLW  81
030C:  MOVWF  FAF
030E:  MOVLW  26
0310:  MOVWF  FAC
0312:  MOVLW  90
0314:  MOVWF  FAB
0316:  CLRF   18
0318:  MOVLW  30
031A:  MOVWF  36
031C:  MOVLW  31
031E:  MOVWF  37
0320:  MOVLW  32
0322:  MOVWF  38
0324:  MOVLW  33
0326:  MOVWF  39
0328:  MOVLW  34
032A:  MOVWF  3A
032C:  MOVLW  35
032E:  MOVWF  3B
0330:  MOVLW  36
0332:  MOVWF  3C
0334:  MOVLW  37
0336:  MOVWF  3D
0338:  MOVLW  38
033A:  MOVWF  3E
033C:  MOVLW  39
033E:  MOVWF  3F
0340:  CLRF   49
0342:  CLRF   4A
0344:  CLRF   4B
0346:  CLRF   4C
0348:  CLRF   4D
034A:  CLRF   4E
034C:  MOVLW  54
034E:  MOVWF  4F
0350:  MOVLW  65
0352:  MOVWF  50
0354:  MOVLW  6D
0356:  MOVWF  51
0358:  MOVLW  70
035A:  MOVWF  52
035C:  MOVLW  20
035E:  MOVWF  53
0360:  MOVLW  3D
0362:  MOVWF  54
0364:  MOVLW  20
0366:  MOVWF  55
0368:  MOVLW  30
036A:  MOVWF  56
036C:  MOVWF  57
036E:  MOVLW  2E
0370:  MOVWF  58
0372:  MOVLW  30
0374:  MOVWF  59
0376:  MOVLW  20
0378:  MOVWF  5A
037A:  MOVWF  5B
037C:  CLRF   5C
037E:  MOVLW  52
0380:  MOVWF  5D
0382:  MOVLW  48
0384:  MOVWF  5E
0386:  MOVLW  20
0388:  MOVWF  5F
038A:  MOVWF  60
038C:  MOVWF  61
038E:  MOVLW  3D
0390:  MOVWF  62
0392:  MOVLW  20
0394:  MOVWF  63
0396:  MOVLW  30
0398:  MOVWF  64
039A:  MOVWF  65
039C:  MOVLW  2E
039E:  MOVWF  66
03A0:  MOVLW  30
03A2:  MOVWF  67
03A4:  MOVLW  20
03A6:  MOVWF  68
03A8:  MOVWF  69
03AA:  CLRF   6A
....................   
....................    setup_adc_ports(ALL_ANALOG);  
03AC:  CLRF   FC1
....................    setup_adc(ADC_CLOCK_INTERNAL);  
03AE:  BCF    FC1.6
03B0:  MOVF   FC2,W
03B2:  ANDLW  38
03B4:  IORLW  C1
03B6:  MOVWF  FC2
....................    setup_psp(PSP_DISABLED);  
03B8:  BCF    F96.4
....................    setup_spi(FALSE);  
03BA:  BCF    FC6.5
03BC:  BCF    F94.5
03BE:  BSF    F94.4
03C0:  BCF    F94.3
03C2:  MOVLW  00
03C4:  MOVWF  FC6
03C6:  MOVWF  FC7
....................    setup_wdt(WDT_OFF);  
03C8:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL);  
03CA:  MOVLW  80
03CC:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED);  
03CE:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1);  
03D0:  MOVLW  00
03D2:  MOVWF  01
03D4:  MOVWF  FCA
03D6:  MOVLW  00
03D8:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1);  
03DA:  MOVF   FB1,W
03DC:  ANDLW  48
03DE:  MOVWF  FB1
....................    enable_interrupts(INT_RDA);  
03E0:  BSF    F9D.5
....................    enable_interrupts(GLOBAL);  
03E2:  MOVLW  C0
03E4:  IORWF  FF2,F
.................... set_tris_c(0x80);  
03E6:  MOVLW  80
03E8:  MOVWF  F94
.................... set_tris_d(0x00);  
03EA:  MOVLW  00
03EC:  MOVWF  F95
.................... set_tris_a(0xff);  
03EE:  MOVLW  FF
03F0:  MOVWF  F92
.................... set_tris_e(0xff);  
03F2:  BSF    F96.0
03F4:  BSF    F96.1
03F6:  BSF    F96.2
.................... set_tris_b(0xff);  
03F8:  MOVWF  F93
.................... port_d=0;  
03FA:  CLRF   F83
....................   
.................... for(;;){  
.................... for(r10=0;r10<350;r10++){  
03FC:  CLRF   4E
03FE:  CLRF   4D
0400:  MOVF   4E,W
0402:  SUBLW  01
0404:  BTFSS  FD8.0
0406:  GOTO   09F0
040A:  BTFSS  FD8.2
040C:  GOTO   041A
0410:  MOVF   4D,W
0412:  SUBLW  5D
0414:  BTFSS  FD8.0
0416:  GOTO   09F0
.................... delay_ms(1200);  
041A:  MOVLW  05
041C:  MOVWF  75
041E:  MOVLW  F0
0420:  MOVWF  76
0422:  CALL   00E4
0426:  DECFSZ 75,F
0428:  BRA    041E
.................... Time_out = 0;  
042A:  BCF    6B.0
....................    Start_signal();  
042C:  GOTO   0112
....................        if(check_response()){                    // If there is response from sensor  
0430:  GOTO   013A
0434:  MOVF   01,F
0436:  BTFSC  FD8.2
0438:  GOTO   05EC
....................       RH_byte1 = Read_Data();                 // read RH byte1  
043C:  CALL   0182
0440:  MOVFF  01,6E
....................       RH_byte2 = Read_Data();                 // read RH byte2  
0444:  CALL   0182
0448:  MOVFF  01,6F
....................       T_byte1 = Read_Data();                  // read T byte1  
044C:  CALL   0182
0450:  MOVFF  01,6C
....................       T_byte2 = Read_Data();                  // read T byte2  
0454:  CALL   0182
0458:  MOVFF  01,6D
....................       Checksum = Read_Data();                 // read checksum  
045C:  CALL   0182
0460:  MOVFF  01,70
....................       if(Time_out){                           // If reading takes long time  
0464:  BTFSS  6B.0
0466:  GOTO   046E
....................         //putc('4');putc('4');putc('4');putc(':');putc('4');putc('4');putc('4');  
....................       }  
....................       else{  
046A:  GOTO   05E8
....................        if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF)){  
046E:  MOVF   6F,W
0470:  ADDWF  6E,W
0472:  ADDWF  6C,W
0474:  ADDWF  6D,W
0476:  SUBWF  70,W
0478:  BTFSS  FD8.2
047A:  GOTO   05E8
....................         rh = RH_byte1;  
047E:  CLRF   72
0480:  MOVFF  6E,71
....................         rh = (rh << 8) | RH_byte2;  
0484:  MOVFF  71,76
0488:  CLRF   75
048A:  MOVF   75,W
048C:  IORWF  6F,W
048E:  MOVWF  71
0490:  MOVF   76,W
0492:  MOVWF  72
....................         Temp = T_byte1;  
0494:  CLRF   74
0496:  MOVFF  6C,73
....................         Temp = (Temp << 8) | T_byte2;  
049A:  MOVFF  73,76
049E:  CLRF   75
04A0:  MOVF   75,W
04A2:  IORWF  6D,W
04A4:  MOVWF  73
04A6:  MOVF   76,W
04A8:  MOVWF  74
....................         if (Temp > 0x8000){  
04AA:  MOVF   74,W
04AC:  SUBLW  7F
04AE:  BTFSC  FD8.0
04B0:  GOTO   04D0
04B4:  XORLW  FF
04B6:  BTFSS  FD8.2
04B8:  GOTO   04C6
04BC:  MOVF   73,W
04BE:  SUBLW  00
04C0:  BTFSC  FD8.0
04C2:  GOTO   04D0
....................          message1[6] = '-';  
04C6:  MOVLW  2D
04C8:  MOVWF  55
....................          Temp = Temp & 0x7FFF; }  
04CA:  BCF    74.7
....................         else{  
04CC:  GOTO   04D4
....................         message1[6] = '0';}  
04D0:  MOVLW  30
04D2:  MOVWF  55
....................         message1[7]  = (Temp / 100) % 10  + 48;  
04D4:  MOVFF  74,78
04D8:  MOVFF  73,77
04DC:  CLRF   7A
04DE:  MOVLW  64
04E0:  MOVWF  79
04E2:  CALL   026C
04E6:  MOVFF  02,76
04EA:  MOVFF  01,75
04EE:  MOVFF  02,78
04F2:  MOVFF  01,77
04F6:  CLRF   7A
04F8:  MOVLW  0A
04FA:  MOVWF  79
04FC:  CALL   026C
0500:  MOVF   00,W
0502:  MOVWF  76
0504:  MOVLW  30
0506:  ADDWF  76,W
0508:  MOVWF  56
....................         message1[8]  = (Temp / 10) % 10  + 48;  
050A:  MOVFF  74,78
050E:  MOVFF  73,77
0512:  CLRF   7A
0514:  MOVLW  0A
0516:  MOVWF  79
0518:  CALL   026C
051C:  MOVFF  02,76
0520:  MOVFF  01,75
0524:  MOVFF  02,78
0528:  MOVFF  01,77
052C:  CLRF   7A
052E:  MOVLW  0A
0530:  MOVWF  79
0532:  CALL   026C
0536:  MOVF   00,W
0538:  MOVWF  76
053A:  MOVLW  30
053C:  ADDWF  76,W
053E:  MOVWF  57
....................         message1[10] = Temp % 10  + 48;  
0540:  MOVFF  74,78
0544:  MOVFF  73,77
0548:  CLRF   7A
054A:  MOVLW  0A
054C:  MOVWF  79
054E:  CALL   026C
0552:  MOVF   00,W
0554:  MOVWF  75
0556:  MOVLW  30
0558:  ADDWF  75,W
055A:  MOVWF  59
....................         message2[7]  = (RH / 100) % 10 + 48;  
055C:  MOVFF  72,78
0560:  MOVFF  71,77
0564:  CLRF   7A
0566:  MOVLW  64
0568:  MOVWF  79
056A:  CALL   026C
056E:  MOVFF  02,76
0572:  MOVFF  01,75
0576:  MOVFF  02,78
057A:  MOVFF  01,77
057E:  CLRF   7A
0580:  MOVLW  0A
0582:  MOVWF  79
0584:  CALL   026C
0588:  MOVF   00,W
058A:  MOVWF  76
058C:  MOVLW  30
058E:  ADDWF  76,W
0590:  MOVWF  64
....................         message2[8]  = (RH / 10) % 10 + 48;  
0592:  MOVFF  72,78
0596:  MOVFF  71,77
059A:  CLRF   7A
059C:  MOVLW  0A
059E:  MOVWF  79
05A0:  CALL   026C
05A4:  MOVFF  02,76
05A8:  MOVFF  01,75
05AC:  MOVFF  02,78
05B0:  MOVFF  01,77
05B4:  CLRF   7A
05B6:  MOVLW  0A
05B8:  MOVWF  79
05BA:  CALL   026C
05BE:  MOVF   00,W
05C0:  MOVWF  76
05C2:  MOVLW  30
05C4:  ADDWF  76,W
05C6:  MOVWF  65
....................         message2[10] = RH % 10 + 48;  
05C8:  MOVFF  72,78
05CC:  MOVFF  71,77
05D0:  CLRF   7A
05D2:  MOVLW  0A
05D4:  MOVWF  79
05D6:  CALL   026C
05DA:  MOVF   00,W
05DC:  MOVWF  75
05DE:  MOVLW  30
05E0:  ADDWF  75,W
05E2:  MOVWF  67
....................   
....................   
....................   
....................        }  
....................         else {  
05E4:  GOTO   05E8
....................           //putc('3');putc('3');putc('3');putc(':');putc('3');putc('3');putc('3');  
....................         }  
....................       }  
....................     }  
....................     else {  
05E8:  GOTO   05EC
....................      // putc('2');putc('2');putc('2');putc(':');putc('2');putc('2');putc('2');  
....................     }  
....................   
....................   
....................   for(i=0;i<=19;i++){  
05EC:  CLRF   18
05EE:  MOVF   18,W
05F0:  SUBLW  13
05F2:  BTFSS  FD8.0
05F4:  GOTO   0626
....................    set_adc_channel(0);  
05F8:  MOVLW  00
05FA:  MOVWF  01
05FC:  MOVF   FC2,W
05FE:  ANDLW  C7
0600:  IORWF  01,W
0602:  MOVWF  FC2
....................    delay_ms(20);  
0604:  MOVLW  14
0606:  MOVWF  76
0608:  CALL   00E4
....................    a0=read_adc();  
060C:  BSF    FC2.2
060E:  BTFSC  FC2.2
0610:  GOTO   060E
0614:  MOVF   FC4,W
0616:  MOVWF  19
....................    r0=r0+a0;  
0618:  MOVF   19,W
061A:  ADDWF  4B,F
061C:  MOVLW  00
061E:  ADDWFC 4C,F
....................    }  
0620:  INCF   18,F
0622:  GOTO   05EE
....................    a0=r0/20;  
0626:  MOVFF  4C,78
062A:  MOVFF  4B,77
062E:  CLRF   7A
0630:  MOVLW  14
0632:  MOVWF  79
0634:  CALL   026C
0638:  MOVFF  01,19
....................    r0=0;  
063C:  CLRF   4C
063E:  CLRF   4B
....................   
....................    for(i=0;i<=19;i++){  
0640:  CLRF   18
0642:  MOVF   18,W
0644:  SUBLW  13
0646:  BTFSS  FD8.0
0648:  GOTO   067A
....................    set_adc_channel(1);  
064C:  MOVLW  08
064E:  MOVWF  01
0650:  MOVF   FC2,W
0652:  ANDLW  C7
0654:  IORWF  01,W
0656:  MOVWF  FC2
....................    delay_ms(20);  
0658:  MOVLW  14
065A:  MOVWF  76
065C:  CALL   00E4
....................    a1=read_adc();  
0660:  BSF    FC2.2
0662:  BTFSC  FC2.2
0664:  GOTO   0662
0668:  MOVF   FC4,W
066A:  MOVWF  1A
....................    r0=r0+a1;  
066C:  MOVF   1A,W
066E:  ADDWF  4B,F
0670:  MOVLW  00
0672:  ADDWFC 4C,F
....................    }  
0674:  INCF   18,F
0676:  GOTO   0642
....................    a1=r0/20;  
067A:  MOVFF  4C,78
067E:  MOVFF  4B,77
0682:  CLRF   7A
0684:  MOVLW  14
0686:  MOVWF  79
0688:  CALL   026C
068C:  MOVFF  01,1A
....................    r0=0;  
0690:  CLRF   4C
0692:  CLRF   4B
....................   
.................... for(i=0;i<=19;i++){  
0694:  CLRF   18
0696:  MOVF   18,W
0698:  SUBLW  13
069A:  BTFSS  FD8.0
069C:  GOTO   06CE
....................   
....................    set_adc_channel(2);  
06A0:  MOVLW  10
06A2:  MOVWF  01
06A4:  MOVF   FC2,W
06A6:  ANDLW  C7
06A8:  IORWF  01,W
06AA:  MOVWF  FC2
.................... delay_ms(20);  
06AC:  MOVLW  14
06AE:  MOVWF  76
06B0:  CALL   00E4
.................... a2=read_adc();  
06B4:  BSF    FC2.2
06B6:  BTFSC  FC2.2
06B8:  GOTO   06B6
06BC:  MOVF   FC4,W
06BE:  MOVWF  1B
.................... r0=r0+a2;  
06C0:  MOVF   1B,W
06C2:  ADDWF  4B,F
06C4:  MOVLW  00
06C6:  ADDWFC 4C,F
.................... }  
06C8:  INCF   18,F
06CA:  GOTO   0696
.................... a2=r0/20;  
06CE:  MOVFF  4C,78
06D2:  MOVFF  4B,77
06D6:  CLRF   7A
06D8:  MOVLW  14
06DA:  MOVWF  79
06DC:  CALL   026C
06E0:  MOVFF  01,1B
.................... r0=0;  
06E4:  CLRF   4C
06E6:  CLRF   4B
....................   
....................   
.................... //temperature  
.................... n1=a0/100;  
06E8:  MOVFF  19,75
06EC:  MOVLW  64
06EE:  MOVWF  76
06F0:  CALL   02C6
06F4:  MOVFF  01,40
.................... n2=a0/10;  
06F8:  MOVFF  19,75
06FC:  MOVLW  0A
06FE:  MOVWF  76
0700:  CALL   02C6
0704:  MOVFF  01,41
.................... n2=n2%10;  
0708:  MOVFF  41,75
070C:  MOVLW  0A
070E:  MOVWF  76
0710:  CALL   02C6
0714:  MOVFF  00,41
.................... n3=a0%10;  
0718:  MOVFF  19,75
071C:  MOVLW  0A
071E:  MOVWF  76
0720:  CALL   02C6
0724:  MOVFF  00,42
....................   
.................... n1=numb[n1];n2=numb[n2];n3=numb[n3];  
0728:  CLRF   03
072A:  MOVF   40,W
072C:  ADDLW  36
072E:  MOVWF  FE9
0730:  MOVLW  00
0732:  ADDWFC 03,W
0734:  MOVWF  FEA
0736:  MOVF   FEF,W
0738:  MOVWF  40
073A:  CLRF   03
073C:  MOVF   41,W
073E:  ADDLW  36
0740:  MOVWF  FE9
0742:  MOVLW  00
0744:  ADDWFC 03,W
0746:  MOVWF  FEA
0748:  MOVF   FEF,W
074A:  MOVWF  41
074C:  CLRF   03
074E:  MOVF   42,W
0750:  ADDLW  36
0752:  MOVWF  FE9
0754:  MOVLW  00
0756:  ADDWFC 03,W
0758:  MOVWF  FEA
075A:  MOVF   FEF,W
075C:  MOVWF  42
....................   
.................... putc('b');putc('b');putc(':');  
075E:  MOVLW  62
0760:  BTFSS  F9E.4
0762:  GOTO   0760
0766:  MOVWF  FAD
0768:  MOVLW  62
076A:  BTFSS  F9E.4
076C:  GOTO   076A
0770:  MOVWF  FAD
0772:  MOVLW  3A
0774:  BTFSS  F9E.4
0776:  GOTO   0774
077A:  MOVWF  FAD
.................... putc(message1[6]);putc(message1[7]); putc(message1[8]);putc(':');  
077C:  MOVF   55,W
077E:  BTFSS  F9E.4
0780:  GOTO   077E
0784:  MOVWF  FAD
0786:  MOVF   56,W
0788:  BTFSS  F9E.4
078A:  GOTO   0788
078E:  MOVWF  FAD
0790:  MOVF   57,W
0792:  BTFSS  F9E.4
0794:  GOTO   0792
0798:  MOVWF  FAD
079A:  MOVLW  3A
079C:  BTFSS  F9E.4
079E:  GOTO   079C
07A2:  MOVWF  FAD
....................   
....................   
.................... //rh  
.................... n1=a1/100;  
07A4:  MOVFF  1A,75
07A8:  MOVLW  64
07AA:  MOVWF  76
07AC:  CALL   02C6
07B0:  MOVFF  01,40
.................... n2=a1/10;  
07B4:  MOVFF  1A,75
07B8:  MOVLW  0A
07BA:  MOVWF  76
07BC:  CALL   02C6
07C0:  MOVFF  01,41
.................... n2=n2%10;  
07C4:  MOVFF  41,75
07C8:  MOVLW  0A
07CA:  MOVWF  76
07CC:  CALL   02C6
07D0:  MOVFF  00,41
.................... n3=a1%10;  
07D4:  MOVFF  1A,75
07D8:  MOVLW  0A
07DA:  MOVWF  76
07DC:  CALL   02C6
07E0:  MOVFF  00,42
....................   
.................... n1=numb[n1];n2=numb[n2];n3=numb[n3];  
07E4:  CLRF   03
07E6:  MOVF   40,W
07E8:  ADDLW  36
07EA:  MOVWF  FE9
07EC:  MOVLW  00
07EE:  ADDWFC 03,W
07F0:  MOVWF  FEA
07F2:  MOVF   FEF,W
07F4:  MOVWF  40
07F6:  CLRF   03
07F8:  MOVF   41,W
07FA:  ADDLW  36
07FC:  MOVWF  FE9
07FE:  MOVLW  00
0800:  ADDWFC 03,W
0802:  MOVWF  FEA
0804:  MOVF   FEF,W
0806:  MOVWF  41
0808:  CLRF   03
080A:  MOVF   42,W
080C:  ADDLW  36
080E:  MOVWF  FE9
0810:  MOVLW  00
0812:  ADDWFC 03,W
0814:  MOVWF  FEA
0816:  MOVF   FEF,W
0818:  MOVWF  42
.................... putc('0');putc(message2[7]);putc(message2[8]);putc(':');  
081A:  MOVLW  30
081C:  BTFSS  F9E.4
081E:  GOTO   081C
0822:  MOVWF  FAD
0824:  MOVF   64,W
0826:  BTFSS  F9E.4
0828:  GOTO   0826
082C:  MOVWF  FAD
082E:  MOVF   65,W
0830:  BTFSS  F9E.4
0832:  GOTO   0830
0836:  MOVWF  FAD
0838:  MOVLW  3A
083A:  BTFSS  F9E.4
083C:  GOTO   083A
0840:  MOVWF  FAD
....................   
.................... //p1  
.................... n1=a2/100;  
0842:  MOVFF  1B,75
0846:  MOVLW  64
0848:  MOVWF  76
084A:  CALL   02C6
084E:  MOVFF  01,40
.................... n2=a2/10;  
0852:  MOVFF  1B,75
0856:  MOVLW  0A
0858:  MOVWF  76
085A:  CALL   02C6
085E:  MOVFF  01,41
.................... n2=n2%10;  
0862:  MOVFF  41,75
0866:  MOVLW  0A
0868:  MOVWF  76
086A:  CALL   02C6
086E:  MOVFF  00,41
.................... n3=a2%10;  
0872:  MOVFF  1B,75
0876:  MOVLW  0A
0878:  MOVWF  76
087A:  CALL   02C6
087E:  MOVFF  00,42
....................   
.................... n1=numb[n1];n2=numb[n2];n3=numb[n3];  
0882:  CLRF   03
0884:  MOVF   40,W
0886:  ADDLW  36
0888:  MOVWF  FE9
088A:  MOVLW  00
088C:  ADDWFC 03,W
088E:  MOVWF  FEA
0890:  MOVF   FEF,W
0892:  MOVWF  40
0894:  CLRF   03
0896:  MOVF   41,W
0898:  ADDLW  36
089A:  MOVWF  FE9
089C:  MOVLW  00
089E:  ADDWFC 03,W
08A0:  MOVWF  FEA
08A2:  MOVF   FEF,W
08A4:  MOVWF  41
08A6:  CLRF   03
08A8:  MOVF   42,W
08AA:  ADDLW  36
08AC:  MOVWF  FE9
08AE:  MOVLW  00
08B0:  ADDWFC 03,W
08B2:  MOVWF  FEA
08B4:  MOVF   FEF,W
08B6:  MOVWF  42
.................... putc(n1);putc(n2);putc(n3);putc(':');  
08B8:  MOVF   40,W
08BA:  BTFSS  F9E.4
08BC:  GOTO   08BA
08C0:  MOVWF  FAD
08C2:  MOVF   41,W
08C4:  BTFSS  F9E.4
08C6:  GOTO   08C4
08CA:  MOVWF  FAD
08CC:  MOVF   42,W
08CE:  BTFSS  F9E.4
08D0:  GOTO   08CE
08D4:  MOVWF  FAD
08D6:  MOVLW  3A
08D8:  BTFSS  F9E.4
08DA:  GOTO   08D8
08DE:  MOVWF  FAD
....................   
.................... //delay_ms(10);  
.................... //n1=numb[n1];n2=numb[n2];n3=numb[n3];  
.................... putc(n1);putc(n2);putc(n3);putc(':');  
08E0:  MOVF   40,W
08E2:  BTFSS  F9E.4
08E4:  GOTO   08E2
08E8:  MOVWF  FAD
08EA:  MOVF   41,W
08EC:  BTFSS  F9E.4
08EE:  GOTO   08EC
08F2:  MOVWF  FAD
08F4:  MOVF   42,W
08F6:  BTFSS  F9E.4
08F8:  GOTO   08F6
08FC:  MOVWF  FAD
08FE:  MOVLW  3A
0900:  BTFSS  F9E.4
0902:  GOTO   0900
0906:  MOVWF  FAD
....................   
.................... delay_ms(1);  
0908:  MOVLW  01
090A:  MOVWF  76
090C:  CALL   00E4
.................... //n1=numb[n1];n2=numb[n2];n3=numb[n3];  
.................... putc(n1);putc(n2);putc(n3);putc(':');  
0910:  MOVF   40,W
0912:  BTFSS  F9E.4
0914:  GOTO   0912
0918:  MOVWF  FAD
091A:  MOVF   41,W
091C:  BTFSS  F9E.4
091E:  GOTO   091C
0922:  MOVWF  FAD
0924:  MOVF   42,W
0926:  BTFSS  F9E.4
0928:  GOTO   0926
092C:  MOVWF  FAD
092E:  MOVLW  3A
0930:  BTFSS  F9E.4
0932:  GOTO   0930
0936:  MOVWF  FAD
.................... delay_ms(1);  
0938:  MOVLW  01
093A:  MOVWF  76
093C:  CALL   00E4
.................... //n1=numb[n1];n2=numb[n2];n3=numb[n3];  
.................... putc(n1);putc(n2);putc(n3);putc(':');  
0940:  MOVF   40,W
0942:  BTFSS  F9E.4
0944:  GOTO   0942
0948:  MOVWF  FAD
094A:  MOVF   41,W
094C:  BTFSS  F9E.4
094E:  GOTO   094C
0952:  MOVWF  FAD
0954:  MOVF   42,W
0956:  BTFSS  F9E.4
0958:  GOTO   0956
095C:  MOVWF  FAD
095E:  MOVLW  3A
0960:  BTFSS  F9E.4
0962:  GOTO   0960
0966:  MOVWF  FAD
.................... delay_ms(1);  
0968:  MOVLW  01
096A:  MOVWF  76
096C:  CALL   00E4
.................... //n1=numb[n1];n2=numb[n2];n3=numb[n3];  
.................... putc(n1);putc(n2);putc(n3);putc(':');  
0970:  MOVF   40,W
0972:  BTFSS  F9E.4
0974:  GOTO   0972
0978:  MOVWF  FAD
097A:  MOVF   41,W
097C:  BTFSS  F9E.4
097E:  GOTO   097C
0982:  MOVWF  FAD
0984:  MOVF   42,W
0986:  BTFSS  F9E.4
0988:  GOTO   0986
098C:  MOVWF  FAD
098E:  MOVLW  3A
0990:  BTFSS  F9E.4
0992:  GOTO   0990
0996:  MOVWF  FAD
.................... putc(n1);putc(n2);putc(n3);putc(':');  
0998:  MOVF   40,W
099A:  BTFSS  F9E.4
099C:  GOTO   099A
09A0:  MOVWF  FAD
09A2:  MOVF   41,W
09A4:  BTFSS  F9E.4
09A6:  GOTO   09A4
09AA:  MOVWF  FAD
09AC:  MOVF   42,W
09AE:  BTFSS  F9E.4
09B0:  GOTO   09AE
09B4:  MOVWF  FAD
09B6:  MOVLW  3A
09B8:  BTFSS  F9E.4
09BA:  GOTO   09B8
09BE:  MOVWF  FAD
.................... delay_ms(1);  
09C0:  MOVLW  01
09C2:  MOVWF  76
09C4:  CALL   00E4
.................... a8=0b00111111 & port_b;  
09C8:  MOVF   F81,W
09CA:  ANDLW  3F
09CC:  MOVWF  21
.................... putc(a8);  
09CE:  MOVF   21,W
09D0:  BTFSS  F9E.4
09D2:  GOTO   09D0
09D6:  MOVWF  FAD
....................   
.................... putc(0x0d);  
09D8:  MOVLW  0D
09DA:  BTFSS  F9E.4
09DC:  GOTO   09DA
09E0:  MOVWF  FAD
.................... k0=0;  
09E2:  CLRF   4A
.................... port_d=0;  
09E4:  CLRF   F83
....................   
.................... }  
09E6:  INCF   4D,F
09E8:  BTFSC  FD8.2
09EA:  INCF   4E,F
09EC:  GOTO   0400
.................... reset_cpu();  
09F0:  RESET
.................... }  
09F2:  GOTO   03FC
.................... }  
....................  
09F6:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0F   BROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
